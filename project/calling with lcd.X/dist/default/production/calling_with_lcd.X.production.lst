

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Mar 23 13:00:21 2023

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0008                     _PORTD	set	8
   209  0007                     _PORTC	set	7
   210  0006                     _PORTB	set	6
   211  0040                     _RD0	set	64
   212  0042                     _RD2	set	66
   213  0041                     _RD1	set	65
   214  003B                     _RC3	set	59
   215  003A                     _RC2	set	58
   216  0039                     _RC1	set	57
   217  0038                     _RC0	set	56
   218  0046                     _RD6	set	70
   219  0045                     _RD5	set	69
   220  0047                     _RD7	set	71
   221  0088                     _TRISD	set	136
   222  0087                     _TRISC	set	135
   223  0086                     _TRISB	set	134
   224  0189                     _ANSELH	set	393
   225  0188                     _ANSEL	set	392
   226                           
   227                           	psect	strings
   228  0003                     __pstrings:
   229  0003                     stringtab:
   230  0003                     __stringtab:
   231  0003                     stringcode:	
   232                           ;	String table - string pointers are 1 byte each
   233                           
   234  0003                     stringdir:
   235  0003  3000               	movlw	high stringdir
   236  0004  008A               	movwf	10
   237  0005  0804               	movf	4,w
   238  0006  0A84               	incf	4,f
   239  0007  0782               	addwf	2,f
   240  0008                     __stringbase:
   241  0008  3400               	retlw	0
   242  0009                     __end_of__stringtab:
   243  0009                     STR_2:
   244  0009  344E               	retlw	78	;'N'
   245  000A  346F               	retlw	111	;'o'
   246  000B  3474               	retlw	116	;'t'
   247  000C  3420               	retlw	32	;' '
   248  000D  3476               	retlw	118	;'v'
   249  000E  3461               	retlw	97	;'a'
   250  000F  346C               	retlw	108	;'l'
   251  0010  3469               	retlw	105	;'i'
   252  0011  3464               	retlw	100	;'d'
   253  0012  3400               	retlw	0
   254  0013                     STR_1:
   255  0013  3463               	retlw	99	;'c'
   256  0014  3461               	retlw	97	;'a'
   257  0015  346C               	retlw	108	;'l'
   258  0016  346C               	retlw	108	;'l'
   259  0017  3469               	retlw	105	;'i'
   260  0018  346E               	retlw	110	;'n'
   261  0019  3467               	retlw	103	;'g'
   262  001A  3400               	retlw	0
   263                           
   264                           	psect	cinit
   265  07F8                     start_initialization:	
   266                           ; #config settings
   267                           
   268  07F8                     __initialization:
   269                           
   270                           ; Clear objects allocated to COMMON
   271  07F8  01F6               	clrf	__pbssCOMMON& (0+127)
   272  07F9  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   273  07FA  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   274  07FB  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   275  07FC                     end_of_initialization:	
   276                           ;End of C runtime variable initialization code
   277                           
   278  07FC                     __end_of__initialization:
   279  07FC  0183               	clrf	3
   280  07FD  120A  118A  2DF5   	ljmp	_main	;jump to C main() function
   281                           
   282                           	psect	bssCOMMON
   283  0076                     __pbssCOMMON:
   284  0076                     _count:
   285  0076                     	ds	2
   286  0078                     _x:
   287  0078                     	ds	2
   288                           
   289                           	psect	cstackCOMMON
   290  0070                     __pcstackCOMMON:
   291  0070                     ?_firstrow:
   292  0070                     ??_firstrow:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     ?_secondrow:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ??_secondrow:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_thirdrow:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ??_thirdrow:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_pulse:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ??_pulse:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_function:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_main:	
   317                           ; 1 bytes @ 0x0
   318                           
   319                           
   320                           ; 1 bytes @ 0x0
   321  0070                     	ds	2
   322  0072                     ?_address:
   323  0072                     ?_pad:	
   324                           ; 1 bytes @ 0x2
   325                           
   326  0072                     ??_function:	
   327                           ; 1 bytes @ 0x2
   328                           
   329  0072                     address@z:	
   330                           ; 1 bytes @ 0x2
   331                           
   332  0072                     pad@a:	
   333                           ; 2 bytes @ 0x2
   334                           
   335                           
   336                           ; 2 bytes @ 0x2
   337  0072                     	ds	1
   338  0073                     function@name:
   339                           
   340                           ; 1 bytes @ 0x3
   341  0073                     	ds	1
   342  0074                     ??_address:
   343  0074                     pad@b:	
   344                           ; 1 bytes @ 0x4
   345                           
   346                           
   347                           ; 2 bytes @ 0x4
   348  0074                     	ds	2
   349  0076                     ??_pad:
   350  0076                     ??_main:	
   351                           ; 1 bytes @ 0x6
   352                           
   353                           
   354                           	psect	maintext
   355  05F5                     __pmaintext:	
   356                           ; 1 bytes @ 0x6
   357 ;;
   358 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   359 ;;
   360 ;; *************** function _main *****************
   361 ;; Defined at:
   362 ;;		line 46 in file "calling.c"
   363 ;; Parameters:    Size  Location     Type
   364 ;;		None
   365 ;; Auto vars:     Size  Location     Type
   366 ;;		None
   367 ;; Return value:  Size  Location     Type
   368 ;;                  1    wreg      void 
   369 ;; Registers used:
   370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   371 ;; Tracked objects:
   372 ;;		On entry : B00/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   376 ;;      Params:         0       0       0       0       0
   377 ;;      Locals:         0       0       0       0       0
   378 ;;      Temps:          0       0       0       0       0
   379 ;;      Totals:         0       0       0       0       0
   380 ;;Total ram usage:        0 bytes
   381 ;; Hardware stack levels required when called: 2
   382 ;; This function calls:
   383 ;;		_address
   384 ;;		_firstrow
   385 ;;		_function
   386 ;;		_pad
   387 ;;		_secondrow
   388 ;;		_thirdrow
   389 ;; This function is called by:
   390 ;;		Startup code after reset
   391 ;; This function uses a non-reentrant model
   392 ;;
   393                           
   394                           
   395                           ;psect for function _main
   396  05F5                     _main:
   397  05F5                     l871:	
   398                           ;incstack = 0
   399                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   400                           
   401                           
   402                           ;calling.c: 48:     TRISB=0x00;
   403  05F5  1683               	bsf	3,5	;RP0=1, select bank1
   404  05F6  1303               	bcf	3,6	;RP1=0, select bank1
   405  05F7  0186               	clrf	6	;volatile
   406                           
   407                           ;calling.c: 49:     PORTB=0x00;
   408  05F8  1283               	bcf	3,5	;RP0=0, select bank0
   409  05F9  1303               	bcf	3,6	;RP1=0, select bank0
   410  05FA  0186               	clrf	6	;volatile
   411  05FB                     l873:
   412                           
   413                           ;calling.c: 50:     TRISC=0xFF;
   414  05FB  30FF               	movlw	255
   415  05FC  1683               	bsf	3,5	;RP0=1, select bank1
   416  05FD  1303               	bcf	3,6	;RP1=0, select bank1
   417  05FE  0087               	movwf	7	;volatile
   418  05FF                     l875:
   419                           
   420                           ;calling.c: 51:     PORTC=0x00;
   421  05FF  1283               	bcf	3,5	;RP0=0, select bank0
   422  0600  1303               	bcf	3,6	;RP1=0, select bank0
   423  0601  0187               	clrf	7	;volatile
   424  0602                     l877:
   425                           
   426                           ;calling.c: 52:     TRISD=0x00;
   427  0602  1683               	bsf	3,5	;RP0=1, select bank1
   428  0603  1303               	bcf	3,6	;RP1=0, select bank1
   429  0604  0188               	clrf	8	;volatile
   430  0605                     l879:
   431                           
   432                           ;calling.c: 53:     PORTD=0x00;
   433  0605  1283               	bcf	3,5	;RP0=0, select bank0
   434  0606  1303               	bcf	3,6	;RP1=0, select bank0
   435  0607  0188               	clrf	8	;volatile
   436  0608                     l881:
   437                           
   438                           ;calling.c: 54:     ANSEL=0x00;
   439  0608  1683               	bsf	3,5	;RP0=1, select bank3
   440  0609  1703               	bsf	3,6	;RP1=1, select bank3
   441  060A  0188               	clrf	8	;volatile
   442  060B                     l883:
   443                           
   444                           ;calling.c: 55:     ANSELH=0x00;
   445  060B  0189               	clrf	9	;volatile
   446  060C                     l885:
   447                           
   448                           ;calling.c: 56:     pad(0x38,0);
   449  060C  3038               	movlw	56
   450  060D  00F2               	movwf	pad@a
   451  060E  3000               	movlw	0
   452  060F  00F3               	movwf	pad@a+1
   453  0610  3000               	movlw	0
   454  0611  00F4               	movwf	pad@b
   455  0612  00F5               	movwf	pad@b+1
   456  0613  120A  118A  25A3  120A  118A  	fcall	_pad
   457  0618                     l887:
   458                           
   459                           ;calling.c: 57:     pad(0x0E,0);
   460  0618  300E               	movlw	14
   461  0619  00F2               	movwf	pad@a
   462  061A  3000               	movlw	0
   463  061B  00F3               	movwf	pad@a+1
   464  061C  3000               	movlw	0
   465  061D  00F4               	movwf	pad@b
   466  061E  00F5               	movwf	pad@b+1
   467  061F  120A  118A  25A3  120A  118A  	fcall	_pad
   468  0624                     l889:
   469                           
   470                           ;calling.c: 58:     pad(0x80,0);
   471  0624  3080               	movlw	128
   472  0625  00F2               	movwf	pad@a
   473  0626  3000               	movlw	0
   474  0627  00F3               	movwf	pad@a+1
   475  0628  3000               	movlw	0
   476  0629  00F4               	movwf	pad@b
   477  062A  00F5               	movwf	pad@b+1
   478  062B  120A  118A  25A3  120A  118A  	fcall	_pad
   479  0630                     l68:	
   480                           ;calling.c: 59:     while(1)
   481                           
   482                           
   483                           ;calling.c: 60:    {;calling.c: 61:        {;calling.c: 62:         firstrow();
   484  0630  120A  118A  2585  120A  118A  	fcall	_firstrow
   485  0635                     l891:
   486                           
   487                           ;calling.c: 63:       if(RC0==1)
   488  0635  1283               	bcf	3,5	;RP0=0, select bank0
   489  0636  1303               	bcf	3,6	;RP1=0, select bank0
   490  0637  1C07               	btfss	7,0	;volatile
   491  0638  2E3A               	goto	u301
   492  0639  2E3B               	goto	u300
   493  063A                     u301:
   494  063A  2E5C               	goto	l897
   495  063B                     u300:
   496  063B                     l893:
   497                           
   498                           ;calling.c: 64:       {;calling.c: 65:           address(x);
   499  063B  3000               	movlw	0
   500  063C  00F2               	movwf	address@z
   501  063D  00F3               	movwf	address@z+1
   502  063E  120A  118A  2597  120A  118A  	fcall	_address
   503                           
   504                           ;calling.c: 66:           pad(0x31,1);
   505  0643  3031               	movlw	49
   506  0644  00F2               	movwf	pad@a
   507  0645  3000               	movlw	0
   508  0646  00F3               	movwf	pad@a+1
   509  0647  3001               	movlw	1
   510  0648  00F4               	movwf	pad@b
   511  0649  3000               	movlw	0
   512  064A  00F5               	movwf	pad@b+1
   513  064B  120A  118A  25A3  120A  118A  	fcall	_pad
   514  0650                     l70:	
   515                           ;calling.c: 67:           while(RC0==1);
   516                           
   517  0650  1283               	bcf	3,5	;RP0=0, select bank0
   518  0651  1303               	bcf	3,6	;RP1=0, select bank0
   519  0652  1807               	btfsc	7,0	;volatile
   520  0653  2E55               	goto	u311
   521  0654  2E56               	goto	u310
   522  0655                     u311:
   523  0655  2E50               	goto	l70
   524  0656                     u310:
   525  0656                     l895:
   526                           
   527                           ;calling.c: 68:           count++;
   528  0656  3001               	movlw	1
   529  0657  07F6               	addwf	_count,f
   530  0658  1803               	skipnc
   531  0659  0AF7               	incf	_count+1,f
   532  065A  3000               	movlw	0
   533  065B  07F7               	addwf	_count+1,f
   534  065C                     l897:
   535                           
   536                           ;calling.c: 70:       if(RC1==1)
   537  065C  1C87               	btfss	7,1	;volatile
   538  065D  2E5F               	goto	u321
   539  065E  2E60               	goto	u320
   540  065F                     u321:
   541  065F  2E81               	goto	l903
   542  0660                     u320:
   543  0660                     l899:
   544                           
   545                           ;calling.c: 71:       {;calling.c: 72:           address(x);
   546  0660  3000               	movlw	0
   547  0661  00F2               	movwf	address@z
   548  0662  00F3               	movwf	address@z+1
   549  0663  120A  118A  2597  120A  118A  	fcall	_address
   550                           
   551                           ;calling.c: 73:           pad(0x34,1);
   552  0668  3034               	movlw	52
   553  0669  00F2               	movwf	pad@a
   554  066A  3000               	movlw	0
   555  066B  00F3               	movwf	pad@a+1
   556  066C  3001               	movlw	1
   557  066D  00F4               	movwf	pad@b
   558  066E  3000               	movlw	0
   559  066F  00F5               	movwf	pad@b+1
   560  0670  120A  118A  25A3  120A  118A  	fcall	_pad
   561  0675                     l74:	
   562                           ;calling.c: 74:           while(RC1==1);
   563                           
   564  0675  1283               	bcf	3,5	;RP0=0, select bank0
   565  0676  1303               	bcf	3,6	;RP1=0, select bank0
   566  0677  1887               	btfsc	7,1	;volatile
   567  0678  2E7A               	goto	u331
   568  0679  2E7B               	goto	u330
   569  067A                     u331:
   570  067A  2E75               	goto	l74
   571  067B                     u330:
   572  067B                     l901:
   573                           
   574                           ;calling.c: 75:           count++;
   575  067B  3001               	movlw	1
   576  067C  07F6               	addwf	_count,f
   577  067D  1803               	skipnc
   578  067E  0AF7               	incf	_count+1,f
   579  067F  3000               	movlw	0
   580  0680  07F7               	addwf	_count+1,f
   581  0681                     l903:
   582                           
   583                           ;calling.c: 77:       if(RC2==1)
   584  0681  1D07               	btfss	7,2	;volatile
   585  0682  2E84               	goto	u341
   586  0683  2E85               	goto	u340
   587  0684                     u341:
   588  0684  2EA6               	goto	l909
   589  0685                     u340:
   590  0685                     l905:
   591                           
   592                           ;calling.c: 78:       {;calling.c: 79:           address(x);
   593  0685  3000               	movlw	0
   594  0686  00F2               	movwf	address@z
   595  0687  00F3               	movwf	address@z+1
   596  0688  120A  118A  2597  120A  118A  	fcall	_address
   597                           
   598                           ;calling.c: 80:           pad(0x37,1);
   599  068D  3037               	movlw	55
   600  068E  00F2               	movwf	pad@a
   601  068F  3000               	movlw	0
   602  0690  00F3               	movwf	pad@a+1
   603  0691  3001               	movlw	1
   604  0692  00F4               	movwf	pad@b
   605  0693  3000               	movlw	0
   606  0694  00F5               	movwf	pad@b+1
   607  0695  120A  118A  25A3  120A  118A  	fcall	_pad
   608  069A                     l78:	
   609                           ;calling.c: 81:           while(RC2==1);
   610                           
   611  069A  1283               	bcf	3,5	;RP0=0, select bank0
   612  069B  1303               	bcf	3,6	;RP1=0, select bank0
   613  069C  1907               	btfsc	7,2	;volatile
   614  069D  2E9F               	goto	u351
   615  069E  2EA0               	goto	u350
   616  069F                     u351:
   617  069F  2E9A               	goto	l78
   618  06A0                     u350:
   619  06A0                     l907:
   620                           
   621                           ;calling.c: 82:           count++;
   622  06A0  3001               	movlw	1
   623  06A1  07F6               	addwf	_count,f
   624  06A2  1803               	skipnc
   625  06A3  0AF7               	incf	_count+1,f
   626  06A4  3000               	movlw	0
   627  06A5  07F7               	addwf	_count+1,f
   628  06A6                     l909:
   629                           
   630                           ;calling.c: 84:         secondrow();
   631  06A6  120A  118A  258B  120A  118A  	fcall	_secondrow
   632  06AB                     l911:
   633                           
   634                           ;calling.c: 85:       if(RC0==1)
   635  06AB  1283               	bcf	3,5	;RP0=0, select bank0
   636  06AC  1303               	bcf	3,6	;RP1=0, select bank0
   637  06AD  1C07               	btfss	7,0	;volatile
   638  06AE  2EB0               	goto	u361
   639  06AF  2EB1               	goto	u360
   640  06B0                     u361:
   641  06B0  2ED2               	goto	l917
   642  06B1                     u360:
   643  06B1                     l913:
   644                           
   645                           ;calling.c: 86:       {;calling.c: 87:           address(x);
   646  06B1  3000               	movlw	0
   647  06B2  00F2               	movwf	address@z
   648  06B3  00F3               	movwf	address@z+1
   649  06B4  120A  118A  2597  120A  118A  	fcall	_address
   650                           
   651                           ;calling.c: 88:           pad(0x32,1);
   652  06B9  3032               	movlw	50
   653  06BA  00F2               	movwf	pad@a
   654  06BB  3000               	movlw	0
   655  06BC  00F3               	movwf	pad@a+1
   656  06BD  3001               	movlw	1
   657  06BE  00F4               	movwf	pad@b
   658  06BF  3000               	movlw	0
   659  06C0  00F5               	movwf	pad@b+1
   660  06C1  120A  118A  25A3  120A  118A  	fcall	_pad
   661  06C6                     l82:	
   662                           ;calling.c: 89:           while(RC0==1);
   663                           
   664  06C6  1283               	bcf	3,5	;RP0=0, select bank0
   665  06C7  1303               	bcf	3,6	;RP1=0, select bank0
   666  06C8  1807               	btfsc	7,0	;volatile
   667  06C9  2ECB               	goto	u371
   668  06CA  2ECC               	goto	u370
   669  06CB                     u371:
   670  06CB  2EC6               	goto	l82
   671  06CC                     u370:
   672  06CC                     l915:
   673                           
   674                           ;calling.c: 90:           count++;
   675  06CC  3001               	movlw	1
   676  06CD  07F6               	addwf	_count,f
   677  06CE  1803               	skipnc
   678  06CF  0AF7               	incf	_count+1,f
   679  06D0  3000               	movlw	0
   680  06D1  07F7               	addwf	_count+1,f
   681  06D2                     l917:
   682                           
   683                           ;calling.c: 92:       if(RC1==1)
   684  06D2  1C87               	btfss	7,1	;volatile
   685  06D3  2ED5               	goto	u381
   686  06D4  2ED6               	goto	u380
   687  06D5                     u381:
   688  06D5  2EF7               	goto	l923
   689  06D6                     u380:
   690  06D6                     l919:
   691                           
   692                           ;calling.c: 93:       {;calling.c: 94:           address(x);
   693  06D6  3000               	movlw	0
   694  06D7  00F2               	movwf	address@z
   695  06D8  00F3               	movwf	address@z+1
   696  06D9  120A  118A  2597  120A  118A  	fcall	_address
   697                           
   698                           ;calling.c: 95:           pad(0x35,1);
   699  06DE  3035               	movlw	53
   700  06DF  00F2               	movwf	pad@a
   701  06E0  3000               	movlw	0
   702  06E1  00F3               	movwf	pad@a+1
   703  06E2  3001               	movlw	1
   704  06E3  00F4               	movwf	pad@b
   705  06E4  3000               	movlw	0
   706  06E5  00F5               	movwf	pad@b+1
   707  06E6  120A  118A  25A3  120A  118A  	fcall	_pad
   708  06EB                     l86:	
   709                           ;calling.c: 96:           while(RC1==1);
   710                           
   711  06EB  1283               	bcf	3,5	;RP0=0, select bank0
   712  06EC  1303               	bcf	3,6	;RP1=0, select bank0
   713  06ED  1887               	btfsc	7,1	;volatile
   714  06EE  2EF0               	goto	u391
   715  06EF  2EF1               	goto	u390
   716  06F0                     u391:
   717  06F0  2EEB               	goto	l86
   718  06F1                     u390:
   719  06F1                     l921:
   720                           
   721                           ;calling.c: 97:           count++;
   722  06F1  3001               	movlw	1
   723  06F2  07F6               	addwf	_count,f
   724  06F3  1803               	skipnc
   725  06F4  0AF7               	incf	_count+1,f
   726  06F5  3000               	movlw	0
   727  06F6  07F7               	addwf	_count+1,f
   728  06F7                     l923:
   729                           
   730                           ;calling.c: 99:       if(RC2==1)
   731  06F7  1D07               	btfss	7,2	;volatile
   732  06F8  2EFA               	goto	u401
   733  06F9  2EFB               	goto	u400
   734  06FA                     u401:
   735  06FA  2F1C               	goto	l929
   736  06FB                     u400:
   737  06FB                     l925:
   738                           
   739                           ;calling.c: 100:       {;calling.c: 101:           address(x);
   740  06FB  3000               	movlw	0
   741  06FC  00F2               	movwf	address@z
   742  06FD  00F3               	movwf	address@z+1
   743  06FE  120A  118A  2597  120A  118A  	fcall	_address
   744                           
   745                           ;calling.c: 102:           pad(0x38,1);
   746  0703  3038               	movlw	56
   747  0704  00F2               	movwf	pad@a
   748  0705  3000               	movlw	0
   749  0706  00F3               	movwf	pad@a+1
   750  0707  3001               	movlw	1
   751  0708  00F4               	movwf	pad@b
   752  0709  3000               	movlw	0
   753  070A  00F5               	movwf	pad@b+1
   754  070B  120A  118A  25A3  120A  118A  	fcall	_pad
   755  0710                     l90:	
   756                           ;calling.c: 103:           while(RC2==1);
   757                           
   758  0710  1283               	bcf	3,5	;RP0=0, select bank0
   759  0711  1303               	bcf	3,6	;RP1=0, select bank0
   760  0712  1907               	btfsc	7,2	;volatile
   761  0713  2F15               	goto	u411
   762  0714  2F16               	goto	u410
   763  0715                     u411:
   764  0715  2F10               	goto	l90
   765  0716                     u410:
   766  0716                     l927:
   767                           
   768                           ;calling.c: 104:           count++;
   769  0716  3001               	movlw	1
   770  0717  07F6               	addwf	_count,f
   771  0718  1803               	skipnc
   772  0719  0AF7               	incf	_count+1,f
   773  071A  3000               	movlw	0
   774  071B  07F7               	addwf	_count+1,f
   775  071C                     l929:
   776                           
   777                           ;calling.c: 106:       if(RC3==1)
   778  071C  1D87               	btfss	7,3	;volatile
   779  071D  2F1F               	goto	u421
   780  071E  2F20               	goto	u420
   781  071F                     u421:
   782  071F  2F41               	goto	l935
   783  0720                     u420:
   784  0720                     l931:
   785                           
   786                           ;calling.c: 107:       {;calling.c: 108:           address(x);
   787  0720  3000               	movlw	0
   788  0721  00F2               	movwf	address@z
   789  0722  00F3               	movwf	address@z+1
   790  0723  120A  118A  2597  120A  118A  	fcall	_address
   791                           
   792                           ;calling.c: 109:           pad(0x30,1);
   793  0728  3030               	movlw	48
   794  0729  00F2               	movwf	pad@a
   795  072A  3000               	movlw	0
   796  072B  00F3               	movwf	pad@a+1
   797  072C  3001               	movlw	1
   798  072D  00F4               	movwf	pad@b
   799  072E  3000               	movlw	0
   800  072F  00F5               	movwf	pad@b+1
   801  0730  120A  118A  25A3  120A  118A  	fcall	_pad
   802  0735                     l94:	
   803                           ;calling.c: 110:           while(RC3==1);
   804                           
   805  0735  1283               	bcf	3,5	;RP0=0, select bank0
   806  0736  1303               	bcf	3,6	;RP1=0, select bank0
   807  0737  1987               	btfsc	7,3	;volatile
   808  0738  2F3A               	goto	u431
   809  0739  2F3B               	goto	u430
   810  073A                     u431:
   811  073A  2F35               	goto	l94
   812  073B                     u430:
   813  073B                     l933:
   814                           
   815                           ;calling.c: 111:           count++;
   816  073B  3001               	movlw	1
   817  073C  07F6               	addwf	_count,f
   818  073D  1803               	skipnc
   819  073E  0AF7               	incf	_count+1,f
   820  073F  3000               	movlw	0
   821  0740  07F7               	addwf	_count+1,f
   822  0741                     l935:
   823                           
   824                           ;calling.c: 113:        thirdrow ();
   825  0741  120A  118A  2591  120A  118A  	fcall	_thirdrow
   826  0746                     l937:
   827                           
   828                           ;calling.c: 114:       if(RC0==1)
   829  0746  1283               	bcf	3,5	;RP0=0, select bank0
   830  0747  1303               	bcf	3,6	;RP1=0, select bank0
   831  0748  1C07               	btfss	7,0	;volatile
   832  0749  2F4B               	goto	u441
   833  074A  2F4C               	goto	u440
   834  074B                     u441:
   835  074B  2F6D               	goto	l943
   836  074C                     u440:
   837  074C                     l939:
   838                           
   839                           ;calling.c: 115:       {;calling.c: 116:           address(x);
   840  074C  3000               	movlw	0
   841  074D  00F2               	movwf	address@z
   842  074E  00F3               	movwf	address@z+1
   843  074F  120A  118A  2597  120A  118A  	fcall	_address
   844                           
   845                           ;calling.c: 117:           pad(0x33,1);
   846  0754  3033               	movlw	51
   847  0755  00F2               	movwf	pad@a
   848  0756  3000               	movlw	0
   849  0757  00F3               	movwf	pad@a+1
   850  0758  3001               	movlw	1
   851  0759  00F4               	movwf	pad@b
   852  075A  3000               	movlw	0
   853  075B  00F5               	movwf	pad@b+1
   854  075C  120A  118A  25A3  120A  118A  	fcall	_pad
   855  0761                     l98:	
   856                           ;calling.c: 118:           while(RC0==1);
   857                           
   858  0761  1283               	bcf	3,5	;RP0=0, select bank0
   859  0762  1303               	bcf	3,6	;RP1=0, select bank0
   860  0763  1807               	btfsc	7,0	;volatile
   861  0764  2F66               	goto	u451
   862  0765  2F67               	goto	u450
   863  0766                     u451:
   864  0766  2F61               	goto	l98
   865  0767                     u450:
   866  0767                     l941:
   867                           
   868                           ;calling.c: 119:           count++;
   869  0767  3001               	movlw	1
   870  0768  07F6               	addwf	_count,f
   871  0769  1803               	skipnc
   872  076A  0AF7               	incf	_count+1,f
   873  076B  3000               	movlw	0
   874  076C  07F7               	addwf	_count+1,f
   875  076D                     l943:
   876                           
   877                           ;calling.c: 121:       if(RC1==1)
   878  076D  1C87               	btfss	7,1	;volatile
   879  076E  2F70               	goto	u461
   880  076F  2F71               	goto	u460
   881  0770                     u461:
   882  0770  2F92               	goto	l949
   883  0771                     u460:
   884  0771                     l945:
   885                           
   886                           ;calling.c: 122:       {;calling.c: 123:           address(x);
   887  0771  3000               	movlw	0
   888  0772  00F2               	movwf	address@z
   889  0773  00F3               	movwf	address@z+1
   890  0774  120A  118A  2597  120A  118A  	fcall	_address
   891                           
   892                           ;calling.c: 124:           pad(0x36,1);
   893  0779  3036               	movlw	54
   894  077A  00F2               	movwf	pad@a
   895  077B  3000               	movlw	0
   896  077C  00F3               	movwf	pad@a+1
   897  077D  3001               	movlw	1
   898  077E  00F4               	movwf	pad@b
   899  077F  3000               	movlw	0
   900  0780  00F5               	movwf	pad@b+1
   901  0781  120A  118A  25A3  120A  118A  	fcall	_pad
   902  0786                     l102:	
   903                           ;calling.c: 125:           while(RC1==1);
   904                           
   905  0786  1283               	bcf	3,5	;RP0=0, select bank0
   906  0787  1303               	bcf	3,6	;RP1=0, select bank0
   907  0788  1887               	btfsc	7,1	;volatile
   908  0789  2F8B               	goto	u471
   909  078A  2F8C               	goto	u470
   910  078B                     u471:
   911  078B  2F86               	goto	l102
   912  078C                     u470:
   913  078C                     l947:
   914                           
   915                           ;calling.c: 126:           count++;
   916  078C  3001               	movlw	1
   917  078D  07F6               	addwf	_count,f
   918  078E  1803               	skipnc
   919  078F  0AF7               	incf	_count+1,f
   920  0790  3000               	movlw	0
   921  0791  07F7               	addwf	_count+1,f
   922  0792                     l949:
   923                           
   924                           ;calling.c: 128:       if(RC2==1)
   925  0792  1D07               	btfss	7,2	;volatile
   926  0793  2F95               	goto	u481
   927  0794  2F96               	goto	u480
   928  0795                     u481:
   929  0795  2FB7               	goto	l955
   930  0796                     u480:
   931  0796                     l951:
   932                           
   933                           ;calling.c: 129:       {;calling.c: 130:           address(x);
   934  0796  3000               	movlw	0
   935  0797  00F2               	movwf	address@z
   936  0798  00F3               	movwf	address@z+1
   937  0799  120A  118A  2597  120A  118A  	fcall	_address
   938                           
   939                           ;calling.c: 131:           pad(0x39,1);
   940  079E  3039               	movlw	57
   941  079F  00F2               	movwf	pad@a
   942  07A0  3000               	movlw	0
   943  07A1  00F3               	movwf	pad@a+1
   944  07A2  3001               	movlw	1
   945  07A3  00F4               	movwf	pad@b
   946  07A4  3000               	movlw	0
   947  07A5  00F5               	movwf	pad@b+1
   948  07A6  120A  118A  25A3  120A  118A  	fcall	_pad
   949  07AB                     l106:	
   950                           ;calling.c: 132:           while(RC2==1);
   951                           
   952  07AB  1283               	bcf	3,5	;RP0=0, select bank0
   953  07AC  1303               	bcf	3,6	;RP1=0, select bank0
   954  07AD  1907               	btfsc	7,2	;volatile
   955  07AE  2FB0               	goto	u491
   956  07AF  2FB1               	goto	u490
   957  07B0                     u491:
   958  07B0  2FAB               	goto	l106
   959  07B1                     u490:
   960  07B1                     l953:
   961                           
   962                           ;calling.c: 133:           count++;
   963  07B1  3001               	movlw	1
   964  07B2  07F6               	addwf	_count,f
   965  07B3  1803               	skipnc
   966  07B4  0AF7               	incf	_count+1,f
   967  07B5  3000               	movlw	0
   968  07B6  07F7               	addwf	_count+1,f
   969  07B7                     l955:
   970                           
   971                           ;calling.c: 135:   };calling.c: 136:             firstrow();
   972  07B7  120A  118A  2585  120A  118A  	fcall	_firstrow
   973  07BC                     l957:
   974                           
   975                           ;calling.c: 137:       if(RC3==1)
   976  07BC  1283               	bcf	3,5	;RP0=0, select bank0
   977  07BD  1303               	bcf	3,6	;RP1=0, select bank0
   978  07BE  1D87               	btfss	7,3	;volatile
   979  07BF  2FC1               	goto	u501
   980  07C0  2FC2               	goto	u500
   981  07C1                     u501:
   982  07C1  2E30               	goto	l68
   983  07C2                     u500:
   984  07C2                     l959:
   985                           
   986                           ;calling.c: 138:       {;calling.c: 139:     if(count ==10)
   987  07C2  300A               	movlw	10
   988  07C3  0676               	xorwf	_count,w
   989  07C4  0477               	iorwf	_count+1,w
   990  07C5  1D03               	btfss	3,2
   991  07C6  2FC8               	goto	u511
   992  07C7  2FC9               	goto	u510
   993  07C8                     u511:
   994  07C8  2FDB               	goto	l965
   995  07C9                     u510:
   996  07C9                     l961:
   997                           
   998                           ;calling.c: 140:     {;calling.c: 141:         pad(0xc0,0);
   999  07C9  30C0               	movlw	192
  1000  07CA  00F2               	movwf	pad@a
  1001  07CB  3000               	movlw	0
  1002  07CC  00F3               	movwf	pad@a+1
  1003  07CD  3000               	movlw	0
  1004  07CE  00F4               	movwf	pad@b
  1005  07CF  00F5               	movwf	pad@b+1
  1006  07D0  120A  118A  25A3  120A  118A  	fcall	_pad
  1007  07D5                     l963:
  1008                           
  1009                           ;calling.c: 142:         function("calling");
  1010  07D5  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1011  07D6  120A  118A  25CF  120A  118A  	fcall	_function
  1012  07DB                     l965:
  1013                           
  1014                           ;calling.c: 144:     if(count!=10)
  1015  07DB  300A               	movlw	10
  1016  07DC  0676               	xorwf	_count,w
  1017  07DD  0477               	iorwf	_count+1,w
  1018  07DE  1903               	btfsc	3,2
  1019  07DF  2FE1               	goto	u521
  1020  07E0  2FE2               	goto	u520
  1021  07E1                     u521:
  1022  07E1  2E30               	goto	l68
  1023  07E2                     u520:
  1024  07E2                     l967:
  1025                           
  1026                           ;calling.c: 145:     {;calling.c: 146:         pad(0xc0,0);
  1027  07E2  30C0               	movlw	192
  1028  07E3  00F2               	movwf	pad@a
  1029  07E4  3000               	movlw	0
  1030  07E5  00F3               	movwf	pad@a+1
  1031  07E6  3000               	movlw	0
  1032  07E7  00F4               	movwf	pad@b
  1033  07E8  00F5               	movwf	pad@b+1
  1034  07E9  120A  118A  25A3  120A  118A  	fcall	_pad
  1035  07EE                     l969:
  1036                           
  1037                           ;calling.c: 147:         function("Not valid");
  1038  07EE  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1039  07EF  120A  118A  25CF  120A  118A  	fcall	_function
  1040  07F4  2E30               	goto	l68
  1041  07F5  120A  118A  2800   	ljmp	start
  1042  07F8                     __end_of_main:
  1043                           
  1044                           	psect	text1
  1045  0591                     __ptext1:	
  1046 ;; *************** function _thirdrow *****************
  1047 ;; Defined at:
  1048 ;;		line 163 in file "calling.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;		None
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;		None
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  1    wreg      void 
  1055 ;; Registers used:
  1056 ;;		None
  1057 ;; Tracked objects:
  1058 ;;		On entry : 0/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1062 ;;      Params:         0       0       0       0       0
  1063 ;;      Locals:         0       0       0       0       0
  1064 ;;      Temps:          0       0       0       0       0
  1065 ;;      Totals:         0       0       0       0       0
  1066 ;;Total ram usage:        0 bytes
  1067 ;; Hardware stack levels used: 1
  1068 ;; This function calls:
  1069 ;;		Nothing
  1070 ;; This function is called by:
  1071 ;;		_main
  1072 ;; This function uses a non-reentrant model
  1073 ;;
  1074                           
  1075                           
  1076                           ;psect for function _thirdrow
  1077  0591                     _thirdrow:
  1078  0591                     l747:	
  1079                           ;incstack = 0
  1080                           ; Regs used in _thirdrow: []
  1081                           
  1082                           
  1083                           ;calling.c: 165:     RD1=0;
  1084  0591  1283               	bcf	3,5	;RP0=0, select bank0
  1085  0592  1303               	bcf	3,6	;RP1=0, select bank0
  1086  0593  1088               	bcf	8,1	;volatile
  1087                           
  1088                           ;calling.c: 166:     RD0=0;
  1089  0594  1008               	bcf	8,0	;volatile
  1090                           
  1091                           ;calling.c: 167:     RD2=1;
  1092  0595  1508               	bsf	8,2	;volatile
  1093  0596                     l123:
  1094  0596  0008               	return
  1095  0597                     __end_of_thirdrow:
  1096                           
  1097                           	psect	text2
  1098  058B                     __ptext2:	
  1099 ;; *************** function _secondrow *****************
  1100 ;; Defined at:
  1101 ;;		line 157 in file "calling.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;		None
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;		None
  1106 ;; Return value:  Size  Location     Type
  1107 ;;                  1    wreg      void 
  1108 ;; Registers used:
  1109 ;;		None
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : 0/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1115 ;;      Params:         0       0       0       0       0
  1116 ;;      Locals:         0       0       0       0       0
  1117 ;;      Temps:          0       0       0       0       0
  1118 ;;      Totals:         0       0       0       0       0
  1119 ;;Total ram usage:        0 bytes
  1120 ;; Hardware stack levels used: 1
  1121 ;; This function calls:
  1122 ;;		Nothing
  1123 ;; This function is called by:
  1124 ;;		_main
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128                           
  1129                           ;psect for function _secondrow
  1130  058B                     _secondrow:
  1131  058B                     l745:	
  1132                           ;incstack = 0
  1133                           ; Regs used in _secondrow: []
  1134                           
  1135                           
  1136                           ;calling.c: 159:     RD0=0;
  1137  058B  1283               	bcf	3,5	;RP0=0, select bank0
  1138  058C  1303               	bcf	3,6	;RP1=0, select bank0
  1139  058D  1008               	bcf	8,0	;volatile
  1140                           
  1141                           ;calling.c: 160:     RD2=0;
  1142  058E  1108               	bcf	8,2	;volatile
  1143                           
  1144                           ;calling.c: 161:     RD1=1;
  1145  058F  1488               	bsf	8,1	;volatile
  1146  0590                     l120:
  1147  0590  0008               	return
  1148  0591                     __end_of_secondrow:
  1149                           
  1150                           	psect	text3
  1151  05A3                     __ptext3:	
  1152 ;; *************** function _pad *****************
  1153 ;; Defined at:
  1154 ;;		line 28 in file "calling.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;  a               2    2[COMMON] int 
  1157 ;;  b               2    4[COMMON] int 
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;		None
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		wreg, status,2, status,0, pclath, cstack
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1169 ;;      Params:         4       0       0       0       0
  1170 ;;      Locals:         0       0       0       0       0
  1171 ;;      Temps:          0       0       0       0       0
  1172 ;;      Totals:         4       0       0       0       0
  1173 ;;Total ram usage:        4 bytes
  1174 ;; Hardware stack levels used: 1
  1175 ;; Hardware stack levels required when called: 1
  1176 ;; This function calls:
  1177 ;;		_pulse
  1178 ;; This function is called by:
  1179 ;;		_main
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           
  1184                           ;psect for function _pad
  1185  05A3                     _pad:
  1186  05A3                     l855:	
  1187                           ;incstack = 0
  1188                           ; Regs used in _pad: [wreg+status,2+status,0+pclath+cstack]
  1189                           
  1190                           
  1191                           ;calling.c: 28: void pad(int a,int b);calling.c: 29: {;calling.c: 30:   RD5=b;
  1192  05A3  1874               	btfsc	pad@b,0
  1193  05A4  2DA6               	goto	u271
  1194  05A5  2DAA               	goto	u270
  1195  05A6                     u271:
  1196  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  1197  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  1198  05A8  1688               	bsf	8,5	;volatile
  1199  05A9  2DAD               	goto	u284
  1200  05AA                     u270:
  1201  05AA  1283               	bcf	3,5	;RP0=0, select bank0
  1202  05AB  1303               	bcf	3,6	;RP1=0, select bank0
  1203  05AC  1288               	bcf	8,5	;volatile
  1204  05AD                     u284:
  1205                           
  1206                           ;calling.c: 31:   RD6=0;
  1207  05AD  1308               	bcf	8,6	;volatile
  1208  05AE                     l857:
  1209                           
  1210                           ;calling.c: 32: PORTB=a ;
  1211  05AE  0872               	movf	pad@a,w
  1212  05AF  0086               	movwf	6	;volatile
  1213  05B0                     l859:
  1214                           
  1215                           ;calling.c: 33: pulse();
  1216  05B0  120A  118A  25B6  120A  118A  	fcall	_pulse
  1217  05B5                     l53:
  1218  05B5  0008               	return
  1219  05B6                     __end_of_pad:
  1220                           
  1221                           	psect	text4
  1222  05CF                     __ptext4:	
  1223 ;; *************** function _function *****************
  1224 ;; Defined at:
  1225 ;;		line 35 in file "calling.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;  name            1    wreg     PTR unsigned char 
  1228 ;;		 -> STR_2(10), STR_1(8), 
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;  name            1    3[COMMON] PTR unsigned char 
  1231 ;;		 -> STR_2(10), STR_1(8), 
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  1    wreg      void 
  1234 ;; Registers used:
  1235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1241 ;;      Params:         0       0       0       0       0
  1242 ;;      Locals:         1       0       0       0       0
  1243 ;;      Temps:          1       0       0       0       0
  1244 ;;      Totals:         2       0       0       0       0
  1245 ;;Total ram usage:        2 bytes
  1246 ;; Hardware stack levels used: 1
  1247 ;; Hardware stack levels required when called: 1
  1248 ;; This function calls:
  1249 ;;		_pulse
  1250 ;; This function is called by:
  1251 ;;		_main
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           
  1256                           ;psect for function _function
  1257  05CF                     _function:
  1258                           
  1259                           ;incstack = 0
  1260                           ; Regs used in _function: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1261                           ;function@name stored from wreg
  1262  05CF  00F3               	movwf	function@name
  1263  05D0                     l861:
  1264                           
  1265                           ;calling.c: 35: void function(char * name);calling.c: 36: {;calling.c: 37:     RD5=1;
  1266  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  1267  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  1268  05D2  1688               	bsf	8,5	;volatile
  1269                           
  1270                           ;calling.c: 38:     RD6=0;
  1271  05D3  1308               	bcf	8,6	;volatile
  1272                           
  1273                           ;calling.c: 39:     while(*name)
  1274  05D4  2DE8               	goto	l869
  1275  05D5                     l863:
  1276                           
  1277                           ;calling.c: 40:     {;calling.c: 41:         PORTB=*name++;
  1278  05D5  0873               	movf	function@name,w
  1279  05D6  0084               	movwf	4
  1280  05D7  120A  118A  2003  120A  118A  	fcall	stringdir
  1281  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  1282  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  1283  05DE  0086               	movwf	6	;volatile
  1284  05DF                     l865:
  1285  05DF  3001               	movlw	1
  1286  05E0  00F2               	movwf	??_function
  1287  05E1  0872               	movf	??_function,w
  1288  05E2  07F3               	addwf	function@name,f
  1289  05E3                     l867:
  1290                           
  1291                           ;calling.c: 42:         pulse();
  1292  05E3  120A  118A  25B6  120A  118A  	fcall	_pulse
  1293  05E8                     l869:
  1294                           
  1295                           ;calling.c: 39:     while(*name)
  1296  05E8  0873               	movf	function@name,w
  1297  05E9  0084               	movwf	4
  1298  05EA  120A  118A  2003  120A  118A  	fcall	stringdir
  1299  05EF  3A00               	xorlw	0
  1300  05F0  1D03               	skipz
  1301  05F1  2DF3               	goto	u291
  1302  05F2  2DF4               	goto	u290
  1303  05F3                     u291:
  1304  05F3  2DD5               	goto	l863
  1305  05F4                     u290:
  1306  05F4                     l59:
  1307  05F4  0008               	return
  1308  05F5                     __end_of_function:
  1309                           
  1310                           	psect	text5
  1311  0585                     __ptext5:	
  1312 ;; *************** function _firstrow *****************
  1313 ;; Defined at:
  1314 ;;		line 151 in file "calling.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;		None
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;		None
  1319 ;; Return value:  Size  Location     Type
  1320 ;;                  1    wreg      void 
  1321 ;; Registers used:
  1322 ;;		None
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1328 ;;      Params:         0       0       0       0       0
  1329 ;;      Locals:         0       0       0       0       0
  1330 ;;      Temps:          0       0       0       0       0
  1331 ;;      Totals:         0       0       0       0       0
  1332 ;;Total ram usage:        0 bytes
  1333 ;; Hardware stack levels used: 1
  1334 ;; This function calls:
  1335 ;;		Nothing
  1336 ;; This function is called by:
  1337 ;;		_main
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341                           
  1342                           ;psect for function _firstrow
  1343  0585                     _firstrow:
  1344  0585                     l743:	
  1345                           ;incstack = 0
  1346                           ; Regs used in _firstrow: []
  1347                           
  1348                           
  1349                           ;calling.c: 153:     RD1=0;
  1350  0585  1283               	bcf	3,5	;RP0=0, select bank0
  1351  0586  1303               	bcf	3,6	;RP1=0, select bank0
  1352  0587  1088               	bcf	8,1	;volatile
  1353                           
  1354                           ;calling.c: 154:     RD2=0;
  1355  0588  1108               	bcf	8,2	;volatile
  1356                           
  1357                           ;calling.c: 155:     RD0=1;
  1358  0589  1408               	bsf	8,0	;volatile
  1359  058A                     l117:
  1360  058A  0008               	return
  1361  058B                     __end_of_firstrow:
  1362                           
  1363                           	psect	text6
  1364  0597                     __ptext6:	
  1365 ;; *************** function _address *****************
  1366 ;; Defined at:
  1367 ;;		line 22 in file "calling.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  z               2    2[COMMON] int 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;		None
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2, status,0, pclath, cstack
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1381 ;;      Params:         2       0       0       0       0
  1382 ;;      Locals:         0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0
  1384 ;;      Totals:         2       0       0       0       0
  1385 ;;Total ram usage:        2 bytes
  1386 ;; Hardware stack levels used: 1
  1387 ;; Hardware stack levels required when called: 1
  1388 ;; This function calls:
  1389 ;;		_pulse
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           
  1396                           ;psect for function _address
  1397  0597                     _address:
  1398  0597                     l849:	
  1399                           ;incstack = 0
  1400                           ; Regs used in _address: [wreg+status,2+status,0+pclath+cstack]
  1401                           
  1402                           
  1403                           ;calling.c: 22: void address(int z);calling.c: 23: {;calling.c: 24:     RD5=0;RD6=0;
  1404  0597  1283               	bcf	3,5	;RP0=0, select bank0
  1405  0598  1303               	bcf	3,6	;RP1=0, select bank0
  1406  0599  1288               	bcf	8,5	;volatile
  1407  059A  1308               	bcf	8,6	;volatile
  1408  059B                     l851:
  1409                           
  1410                           ;calling.c: 25:     PORTB=z;
  1411  059B  0872               	movf	address@z,w
  1412  059C  0086               	movwf	6	;volatile
  1413  059D                     l853:
  1414                           
  1415                           ;calling.c: 26:     pulse();
  1416  059D  120A  118A  25B6  120A  118A  	fcall	_pulse
  1417  05A2                     l50:
  1418  05A2  0008               	return
  1419  05A3                     __end_of_address:
  1420                           
  1421                           	psect	text7
  1422  05B6                     __ptext7:	
  1423 ;; *************** function _pulse *****************
  1424 ;; Defined at:
  1425 ;;		line 15 in file "calling.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;		None
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;		None
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      void 
  1432 ;; Registers used:
  1433 ;;		wreg
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1439 ;;      Params:         0       0       0       0       0
  1440 ;;      Locals:         0       0       0       0       0
  1441 ;;      Temps:          2       0       0       0       0
  1442 ;;      Totals:         2       0       0       0       0
  1443 ;;Total ram usage:        2 bytes
  1444 ;; Hardware stack levels used: 1
  1445 ;; This function calls:
  1446 ;;		Nothing
  1447 ;; This function is called by:
  1448 ;;		_address
  1449 ;;		_pad
  1450 ;;		_function
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           
  1455                           ;psect for function _pulse
  1456  05B6                     _pulse:
  1457  05B6                     l715:	
  1458                           ;incstack = 0
  1459                           ; Regs used in _pulse: [wreg]
  1460                           
  1461                           
  1462                           ;calling.c: 17:     RD7=1;
  1463  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  1464  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  1465  05B8  1788               	bsf	8,7	;volatile
  1466  05B9                     l717:
  1467                           
  1468                           ;calling.c: 18:     _delay((unsigned long)((100)*(400000/4000.0)));
  1469  05B9  300D               	movlw	13
  1470  05BA  00F1               	movwf	??_pulse+1
  1471  05BB  30FB               	movlw	251
  1472  05BC  00F0               	movwf	??_pulse
  1473  05BD                     u537:
  1474  05BD  0BF0               	decfsz	??_pulse,f
  1475  05BE  2DBD               	goto	u537
  1476  05BF  0BF1               	decfsz	??_pulse+1,f
  1477  05C0  2DBD               	goto	u537
  1478  05C1  2DC2               	nop2
  1479  05C2                     l719:
  1480                           
  1481                           ;calling.c: 19:     RD7=0;
  1482  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  1483  05C3  1303               	bcf	3,6	;RP1=0, select bank0
  1484  05C4  1388               	bcf	8,7	;volatile
  1485                           
  1486                           ;calling.c: 20:     _delay((unsigned long)((100)*(400000/4000.0)));
  1487  05C5  300D               	movlw	13
  1488  05C6  00F1               	movwf	??_pulse+1
  1489  05C7  30FB               	movlw	251
  1490  05C8  00F0               	movwf	??_pulse
  1491  05C9                     u547:
  1492  05C9  0BF0               	decfsz	??_pulse,f
  1493  05CA  2DC9               	goto	u547
  1494  05CB  0BF1               	decfsz	??_pulse+1,f
  1495  05CC  2DC9               	goto	u547
  1496  05CD  2DCE               	nop2
  1497  05CE                     l47:
  1498  05CE  0008               	return
  1499  05CF                     __end_of_pulse:
  1500  007E                     btemp	set	126	;btemp
  1501  007E                     wtemp0	set	126

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    function@name	PTR unsigned char  size(1) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_pad
    _pad->_pulse
    _function->_pulse
    _address->_pulse

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3217
                            _address
                           _firstrow
                           _function
                                _pad
                          _secondrow
                           _thirdrow
 ---------------------------------------------------------------------------------
 (1) _thirdrow                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _secondrow                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pad                                                  4     0      4    2324
                                              2 COMMON     4     0      4
                              _pulse
 ---------------------------------------------------------------------------------
 (1) _function                                             2     2      0     111
                                              2 COMMON     2     2      0
                              _pulse
 ---------------------------------------------------------------------------------
 (1) _firstrow                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _address                                              2     0      2     782
                                              2 COMMON     2     0      2
                              _pulse
 ---------------------------------------------------------------------------------
 (2) _pulse                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _address
     _pulse
   _firstrow
   _function
     _pulse
   _pad
     _pulse
   _secondrow
   _thirdrow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       A      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Mar 23 13:00:21 2023

                      _x 0078                        pc 0002                       l50 05A2  
                     l53 05B5                       l70 0650                       l47 05CE  
                     l90 0710                       l82 06C6                       l74 0675  
                     l59 05F4                       l68 0630                       l94 0735  
                     l86 06EB                       l78 069A                       l98 0761  
                     fsr 0004                      l102 0786                      l120 0590  
                    l106 07AB                      l123 0596                      l117 058A  
                    l715 05B6                      l717 05B9                      l901 067B  
                    l719 05C2                      l743 0585                      l911 06AB  
                    l903 0681                      l745 058B                      l921 06F1  
                    l913 06B1                      l905 0685                      l851 059B  
                    l747 0591                      l931 0720                      l923 06F7  
                    l915 06CC                      l907 06A0                      l853 059D  
                    l861 05D0                      l941 0767                      l933 073B  
                    l925 06FB                      l917 06D2                      l909 06A6  
                    l863 05D5                      l855 05A3                      l951 0796  
                    l943 076D                      l935 0741                      l927 0716  
                    l919 06D6                      l871 05F5                      l849 0597  
                    l865 05DF                      l857 05AE                      l961 07C9  
                    l953 07B1                      l945 0771                      l937 0746  
                    l929 071C                      l881 0608                      l873 05FB  
                    l867 05E3                      l859 05B0                      l963 07D5  
                    l955 07B7                      l947 078C                      l939 074C  
                    l891 0635                      l883 060B                      l875 05FF  
                    l869 05E8                      l965 07DB                      l957 07BC  
                    l949 0792                      l893 063B                      l885 060C  
                    l877 0602                      l967 07E2                      l959 07C2  
                    l895 0656                      l887 0618                      l879 0605  
                    l969 07EE                      l897 065C                      l889 0624  
                    l899 0660                      _RC0 0038                      _RC1 0039  
                    _RC2 003A                      _RD0 0040                      _RC3 003B  
                    _RD1 0041                      _RD2 0042                      _RD5 0045  
                    _RD6 0046                      _RD7 0047                      u300 063B  
                    u301 063A                      u310 0656                      u311 0655  
                    u400 06FB                      u320 0660                      u401 06FA  
                    u321 065F                      u410 0716                      u330 067B  
                    u411 0715                      u331 067A                      u500 07C2  
                    u420 0720                      u340 0685                      u501 07C1  
                    u421 071F                      u341 0684                      u270 05AA  
                    u510 07C9                      u430 073B                      u350 06A0  
                    u271 05A6                      u511 07C8                      u431 073A  
                    u351 069F                      u520 07E2                      u440 074C  
                    u360 06B1                      u521 07E1                      u441 074B  
                    u361 06B0                      u290 05F4                      u450 0767  
                    u370 06CC                      u291 05F3                      u451 0766  
                    u371 06CB                      u284 05AD                      u460 0771  
                    u380 06D6                      u461 0770                      u381 06D5  
                    u470 078C                      u390 06F1                      u471 078B  
                    u391 06F0                      u480 0796                      u537 05BD  
                    u481 0795                      u490 07B1                      u547 05C9  
                    u491 07B0                      _pad 05A3                      fsr0 0004  
                   ?_pad 0072                     STR_1 0013                     STR_2 0009  
                   _main 05F5                     pad@a 0072                     pad@b 0074  
                   btemp 007E                     start 0000                    ??_pad 0076  
                  ?_main 0070                    _ANSEL 0188          __end_of_address 05A3  
                  _PORTB 0006                    _PORTC 0007                    _PORTD 0008  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
                  _count 0076                    _pulse 05B6                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07F8  
           __end_of_main 07F8                   ??_main 0076                   ?_pulse 0070  
                 _ANSELH 0189         __end_of_firstrow 058B                ??_address 0074  
       __end_of_function 05F5         __end_of_thirdrow 0597  __end_of__initialization 07FC  
         __pcstackCOMMON 0070            __end_of_pulse 05CF                  ??_pulse 0070  
             __pmaintext 05F5       __size_of_secondrow 0006               __stringtab 0003  
              ?_firstrow 0070                ?_function 0070                ?_thirdrow 0070  
                _address 0597                  __ptext1 0591                  __ptext2 058B  
                __ptext3 05A3                  __ptext4 05CF                  __ptext5 0585  
                __ptext6 0597                  __ptext7 05B6             __size_of_pad 0013  
   end_of_initialization 07FC        __end_of_secondrow 0591               ??_firstrow 0070  
             ??_function 0072               ??_thirdrow 0070             function@name 0073  
    start_initialization 07F8              __end_of_pad 05B6              __pbssCOMMON 0076  
              ___latbits 0002        __size_of_firstrow 0006        __size_of_function 0026  
               ?_address 0072        __size_of_thirdrow 0006                __pstrings 0003  
         __size_of_pulse 0019                _secondrow 058B              __stringbase 0008  
             ?_secondrow 0070         __size_of_address 000C       __end_of__stringtab 0009  
               address@z 0072                 _firstrow 0585            __size_of_main 0203  
               _function 05CF                 _thirdrow 0591              ??_secondrow 0070  
              stringcode 0003                 stringdir 0003                 stringtab 0003  
